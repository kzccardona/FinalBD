-----------------------------//punto 1 //--------------------------------------------------------

CREATE TYPE number_array AS VARRAY(100) OF INTEGER;

DECLARE
    v2 number_array;
    numero integer := 3;
    cantidad integer := 0;
BEGIN
    v2 := number_array(1, 3, 2, 6, 1, 2);
    cantidad := divisible_sum_pairs(v2, numero);
    DBMS_OUTPUT.PUT_LINE('LAS PAREJAS SON ' || cantidad);
END;

create or replace function divisible_sum_pairs(arreglo number_array, numero INTEGER) return integer is 
suma number := 0;
contador integer :=0;
j integer := 0;
Error exception;
begin
  if arreglo.Count >= 1 and arreglo.Count <= 100 and numero >= 1 and numero <= 100 then
    FOR i IN 1..arreglo.COUNT LOOP
      j := i+1;
        FOR j IN 1..arreglo.COUNT LOOP
          if arreglo(i) < arreglo(j) then
            suma := mod((arreglo(i) + arreglo(j)),numero);
            if suma = 0 then
            --DBMS_OUTPUT.PUT_LINE(i || ',' || j || '->' || arreglo(i) || '+' || arreglo(j) || '=' ||arreglo(i)+ arreglo(j));
            contador := contador +1;
            end if;
          end if;
        END LOOP;
    END LOOP;
    return contador;
    else
      raise Error;
    end if;
    exception
	when Error then
    dbms_output.put_line('loa valores no estan entre 1 y 100');
    return 0;
    when OTHERS then 
    dbms_output.put_line('Ocurrió un error con los valores');
    return 0;
end;

--------------------------------------------------//punto 2 //------------------------------------------
create or replace function find_digits(numero number) return number is
suma number;
caracter varchar2(255);
valor number;
begin
  caracter := TO_CHAR(numero);
  
  FOR I IN 1..LENGTH(caracter) LOOP
        valor := mod(SUBSTR(TEXTO,I,1),SUBSTR(TEXTO,I,1));
        if valor = 0 then 
            suma := suma +1;
        end if;
  END LOOP; 
  return suma;
end;

-------------------------------------------------//punto 3 //----------------------------------------------

create table digits (n integer, pairs integer)

insert into digits (n) values (1);
insert into digits (n) values (2);
insert into digits (n) values (3);
insert into digits (n) values (4);
insert into digits (n) values (5);
insert into digits (n) values (6);
insert into digits (n) values (7);
insert into digits (n) values (8);
insert into digits (n) values (9);
insert into digits (n) values (10);

create or replace procedure CALCULATE_FIND_DIGITS as
begin
  
end;


